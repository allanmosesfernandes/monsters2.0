{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.jsx","components/searchBox/searchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","search","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAWeA,EATK,SAACC,GACrB,OAAO,sBAAKC,UAAU,iBAAf,UAEH,qBAAKC,IAAI,cAAcC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAC1B,mCAA8BL,EAAMI,QAAQE,OAAlCN,EAAMI,QAAQC,IACxB,4BAAIL,EAAMI,QAAQG,YCQPC,G,MAXS,SAAAR,GACpB,OAAO,qBAAKC,UAAU,YAAf,SAEHD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCGlBM,G,MARG,SAAC,GAAoC,IAAjCC,EAAgC,EAAhCA,YAAYC,EAAoB,EAApBA,aAC9B,OAAO,uBAAOZ,UAAU,SACxBa,KAAK,SACLF,YAAcA,EACdG,SAAYF,MCmCDG,E,kDApCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAbjC,EAAKC,MAAQ,CAEXb,SAAU,GACVU,OAAQ,IALC,E,qDASb,WAAqB,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAACT,SAAWkB,S,oBAM5C,WAAU,IAAD,EAEsBC,KAAKN,MAA1Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,OACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAOY,kBAC/F,OACE,sBAAK9B,UAAU,MAAf,UACA,cAAC,EAAD,CACAW,YAAc,qBACdC,aAAgBe,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAaoB,W,GA5BXI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0cec4811.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = (props) => {\r\nreturn <div className='card-container'>\r\n\r\n    <img alt='monster-img' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n    <h1 key= {props.monster.id}> {props.monster.name}</h1>\r\n    <p>{props.monster.email}</p>\r\n</div>\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/card-component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n    return <div className='card-list'>\r\n    {\r\n        props.monsters.map(monster => (\r\n            <Card key = {monster.id} monster = {monster} />\r\n        ))        \r\n    }\r\n\r\n    </div>\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ( { placeholder,handleChange } ) => {\r\n    return <input className='search' \r\n    type='search' \r\n    placeholder= {placeholder}\r\n    onChange = {handleChange}\r\n    />\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/searchBox/searchBox.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      // name: 'Allan'\n      monsters: [],\n      search: '',\n  };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n    .then(users => this.setState ({monsters : users }))\n  }\n\n  handleChange = e => {\n    this.setState({ search: e.target.value });\n  }\n  render() {\n\n    const { monsters, search } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(search.toLowerCase()))\n    return (\n      <div className='App'>\n      <SearchBox \n      placeholder = 'Search for Monster' \n      handleChange = {this.handleChange}\n      />\n      <CardList monsters = { filteredMonsters }>\n      </CardList>\n\n\n\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}